runApp('ShinyApp')
View(set_data)
get_set_data()
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = sapply(set_data$champions[[1]]$apiName, function(x) {
champ_id <- tolower(gsub("TFT[0-9]+_", "", x))
paste0("https://raw.communitydragon.org/pbe/game/assets/characters/",
champ_id, "/hud/", champ_id, "_square.tft.png")
}),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
View(set_data)
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
runApp('ShinyApp')
View(set_data)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
View(tft_data)
runApp('ShinyApp')
View(tft_data)
tft_data[["sets"]][["13"]][["champions"]][["role"]]
# Helper function to identify unit-specific traits
get_unit_specific_traits <- function(units_df) {
# Count how many units have each trait
trait_counts <- units_df %>%
select(unit_name, traits) %>%
unnest(traits) %>%
count(traits, name = "unit_count") %>%
filter(unit_count == 1) %>%
pull(traits)
return(trait_counts)
}
get_unit_specific_traits(set_data$units)
# Helper function to identify unit-specific traits
get_unit_specific_traits <- function(units_df) {
# First split all trait combinations into individual traits
all_traits <- units_df %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
# Count how many units have each individual trait
trait_counts <- all_traits %>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count") %>%
filter(unit_count == 1) %>%
pull(traits)
return(trait_counts)
}
get_unit_specific_traits(set_data$units)
units_df %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
all_traits %>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)%>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
a <- set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)%>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
a
View(a)
preprocess_units(set_data$units)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
View(set_data)
get_set_data()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
debugonce(find_horizontal_comp_correct)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
find_horizontal_comp_correct()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
gc()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
forgetDeployment()
applications()
deployments::forgetDeployment()
install.packages("deployments")
library(deployments)
rsconnect::forgetDeployment("C:/Users/adker/Desktop/R/TFT/ShinyApp")
# View your existing apps on shinyapps.io
rsconnect::applications(account = "andrew-d-kerr", server = "shinyapps.io")
# Then either:
# 1. Deploy to an existing app you find in the list, or
# 2. Use forgetDeployment() as above and deploy fresh
rsconnect::deployApp(
appDir = "C:/Users/adker/Desktop/R/TFT/ShinyApp",
account = "andrew-d-kerr",
server = "shinyapps.io",
appName = "TFTHelper",
appTitle = "TFTHelper",
forceUpdate = TRUE  # This ensures a fresh deployment
)
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
library(tidyverse)
library(jsonlite)
library(memoise)
url <- "https://raw.communitydragon.org/latest/cdragon/tft/en_us.json"
tft_data <- fromJSON(url)
View(tft_data)
get_set("14")
get_set <- function(set = NA) {
# Get all available set numbers
set_numbers <- tft_data$setData$number %>%
as.integer() %>%
unique() %>%
sort()
if (is.na(set)) {
set_data <- tft_data$setData[tft_data$setData$number == max(set_numbers),][1,]
} else {
# Check if set number is available
if (!set %in% set_numbers) {
stop(paste("Set", set, "not available. Available sets:",
paste(set_numbers, collapse = ", ")))
}
set_data <- tft_data$setData[tft_data$setData$number == set,][1,]
}
return(set_data)
}
get_set("14")
a <- get_set("14")
View(a)
a <- get_set_data()
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
a <- get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
a <- get_set_data()
get_craftable_emblems <- function(set_data) {
# Extract all items and filter for emblems
all_items <- set_data$items[[1]]
all_items <- enframe(all_items, name = "id", value = "item") %>%
unnest_wider(item, names_sep = " ")
# Identify craftable emblems
craftable_emblems <- all_items %>%
filter(
grepl("Emblem", `item 1`)
) %>%
mutate(item = `item 1`, .keep = "none")
return(craftable_emblems)
}
a <- get_set_data()
View(a)
a[["craftable"]][["items"]]
a[["traits"]][["trait_id"]]
tft_data[["setData"]][["items"]][[1]]
tft_data[["setData"]][["number"]]
tft_data[["setData"]][["traits"]][[24]][["apiName"]]
tft_data[["setData"]][["number" == 14]]
tft_data[["setData"]][["number" = 14]]
tft_data[["setData"]][tft_data["number" = 14]]
tft_data[["setData"]][["number"]] == 14
tft_data[["setData"]][["traits"]]tft_data[["setData"]][["number"]] == 14[["apiName"]]
tft_data[["setData"]][["traits"]][tft_data[["setData"]][["number"]] == 14][["apiName"]]
tft_data[["setData"]][["traits"]][tft_data[["setData"]][["number"]] == 14]
shiny::runApp('ShinyApp')
