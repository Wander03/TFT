runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
gc()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
forgetDeployment()
applications()
deployments::forgetDeployment()
install.packages("deployments")
library(deployments)
rsconnect::forgetDeployment("C:/Users/adker/Desktop/R/TFT/ShinyApp")
# View your existing apps on shinyapps.io
rsconnect::applications(account = "andrew-d-kerr", server = "shinyapps.io")
# Then either:
# 1. Deploy to an existing app you find in the list, or
# 2. Use forgetDeployment() as above and deploy fresh
rsconnect::deployApp(
appDir = "C:/Users/adker/Desktop/R/TFT/ShinyApp",
account = "andrew-d-kerr",
server = "shinyapps.io",
appName = "TFTHelper",
appTitle = "TFTHelper",
forceUpdate = TRUE  # This ensures a fresh deployment
)
shiny::runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
library(tidyverse)
library(jsonlite)
library(memoise)
url <- "https://raw.communitydragon.org/latest/cdragon/tft/en_us.json"
tft_data <- fromJSON(url)
View(tft_data)
get_set("14")
get_set <- function(set = NA) {
# Get all available set numbers
set_numbers <- tft_data$setData$number %>%
as.integer() %>%
unique() %>%
sort()
if (is.na(set)) {
set_data <- tft_data$setData[tft_data$setData$number == max(set_numbers),][1,]
} else {
# Check if set number is available
if (!set %in% set_numbers) {
stop(paste("Set", set, "not available. Available sets:",
paste(set_numbers, collapse = ", ")))
}
set_data <- tft_data$setData[tft_data$setData$number == set,][1,]
}
return(set_data)
}
get_set("14")
a <- get_set("14")
View(a)
a <- get_set_data()
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
a <- get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
a <- get_set_data()
get_craftable_emblems <- function(set_data) {
# Extract all items and filter for emblems
all_items <- set_data$items[[1]]
all_items <- enframe(all_items, name = "id", value = "item") %>%
unnest_wider(item, names_sep = " ")
# Identify craftable emblems
craftable_emblems <- all_items %>%
filter(
grepl("Emblem", `item 1`)
) %>%
mutate(item = `item 1`, .keep = "none")
return(craftable_emblems)
}
a <- get_set_data()
View(a)
a[["craftable"]][["items"]]
a[["traits"]][["trait_id"]]
tft_data[["setData"]][["items"]][[1]]
tft_data[["setData"]][["number"]]
tft_data[["setData"]][["traits"]][[24]][["apiName"]]
tft_data[["setData"]][["number" == 14]]
tft_data[["setData"]][["number" = 14]]
tft_data[["setData"]][tft_data["number" = 14]]
tft_data[["setData"]][["number"]] == 14
tft_data[["setData"]][["traits"]]tft_data[["setData"]][["number"]] == 14[["apiName"]]
tft_data[["setData"]][["traits"]][tft_data[["setData"]][["number"]] == 14][["apiName"]]
tft_data[["setData"]][["traits"]][tft_data[["setData"]][["number"]] == 14]
shiny::runApp('ShinyApp')
install.packages("jsonlite")
library(jsonlite)
library(tidyverse)
install.packages("httr2")
cat(
"https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/", gameName, "/", tagLine, "?api_key=", RIOT_KEY,
sep = ""
)
gameName <- "Wander"
tagLine <- "HENRO"
cat(
"https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/", gameName, "/", tagLine, "?api_key=", RIOT_KEY,
sep = ""
)
riot_api_key <- Sys.getenv("RIOT_API_KEY")
cat(
"https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/", game_name, "/", tag_line, "?api_key=", riot_api_key,
sep = ""
)
game_name <- "Wander"
tag_line <- "HENRO"
cat(
"https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/", game_name, "/", tag_line, "?api_key=", riot_api_key,
sep = ""
)
riot_api_key
riot_api_key <- Sys.getenv("RIOT_KEY")
riot_api_key
cat(
"https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/", game_name, "/", tag_line, "?api_key=", riot_api_key,
sep = ""
)
api_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}"
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
#| message: false
library(httr2) # API calls
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
riot_api_key
riot_api_key <- Sys.getenv("RIOT_KEY")
riot_api_key
Sys.getenv("RIOT_KEY")
Sys.getenv("RIOT_KEY")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = RIOT_KEY) %>%
req_perform()
Sys.getenv("RIOT_KEY")
install.packages("dotenv")
library(dotenv)
library(dotenv)
riot_api_key <- Sys.getenv("RIOT_KEY")
riot_api_key
riot_api_key
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
library(glue)
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
api_url
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
riot_api_key
request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key)
api_url <- glue("/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform(verbosity = 3)
riot_api_key <- Sys.getenv("RIOT_KEY")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform(verbosity = 3)
riot_api_key <- Sys.getenv("RIOT_KEY")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform(verbosity = 3)
api_url
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}", .sep = "")
api_url
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform(verbosity = 3)
request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key)
riot_api_key <- Sys.getenv("RIOT_KEY")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
api_url
game_name <- "Wande"
tag_line <- "HENRO"
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
api_url
game_name <- "Wander"
tag_line <- "HENRO"
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}?api_key={riot_api_key}")
api_url
response <- request(api_url) %>%
# req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
example_url()
request(api_url)
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/Wander/HENRO?api_key=RGAPI-02c8f70f-f868-4804-a6d5-363d67473c4c") %>%
# req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
api_url
response
api_url <- glue("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{game_name}/{tag_line}")
response <- request(api_url) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
api_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id"
api_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/gameName/tagLine"
response <- request(api_url) %>%
req_url_query(
gameName = game_name,
tagLine = tag_line
) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
request(api_url) %>%
req_url_query(
gameName = game_name,
tagLine = tag_line
)
api_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id"
response <- request(api_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers("X-Riot-Token" = riot_api_key) %>%
req_perform()
request(api_url) %>%
req_url_path_append(game_name, tag_line)
req <- request("http://example.com")
params <- list(a = "1", b = "2")
req |>
req_url_query(!!!params, c = "3")
response <- request(api_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/Wander/HENRO") %>%
# req_url_path_append(game_name, tag_line) %>%
req_headers("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/Wander/HENRO") %>%
# req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/Wander/HENRO") %>%
# req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY"))
api_url_with_key <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/Wander/HENRO?api_key=RGAPI-02c8f70f-f868-4804-a6d5-363d67473c4c"
response <- request(api_url_with_key) %>% req_perform()
response
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = "RGAPI-02c8f70f-f868-4804-a6d5-363d67473c4c") %>%
req_perform()
Sys.getenv("RIOT_KEY")
Sys.getenv("RIOT_KEY")[1]
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")[1]) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = trimws(Sys.getenv("RIOT_KEY"))) %>%
req_perform()
Sys.getenv("RIOT_KEY")
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = trimws(Sys.getenv("RIOT_KEY"))) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
Sys.getenv("RIOT_KEY")
Sys.getenv("RIOT_KEY")
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = charToRaw(Sys.getenv("RIOT_KEY"))) %>%
req_perform()
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = gsub("^[[:space:]]+|[[:space:]]+$", "", Sys.getenv("RIOT_KEY"))) %>%
req_perform()
gsub("^[[:space:]]+|[[:space:]]+$", "", Sys.getenv("RIOT_KEY")
gsub("^[[:space:]]+|[[:space:]]+$", "", Sys.getenv("RIOT_KEY"))
response <- request("https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id") %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" ="RGAPI-02c8f70f-f868-4804-a6d5-363d67473c4c") %>%
req_perform()
Sys.getenv("RIOT_KEY") == "RGAPI-02c8f70f-f868-4804-a6d5-363d67473c4c"
Sys.getenv("RIOT_KEY")
Sys.getenv("RIOT_KEY")
response <- request(base_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
game_name <- "Wander"
game_tag <- "HENRO"
base_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id"
response <- request(base_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
Sys.getenv("RIOT_KEY")
load_dot_env()
response <- request(base_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
# Check the response
resp_status(response)
resp_body_json(response, simplifyVector = TRUE)
resp_body_json(response)
resp_body_json(response, simplifyVector = TRUE)
base_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}"
response <- request(base_url) %>%
req_url_query(gameName = game_name, tagLine = tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
request(base_url) %>%
req_url_query(gameName = game_name, tagLine = tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY"))
base_url <- "https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id"
response <- request(base_url) %>%
req_url_path_append(game_name, tag_line) %>%
req_headers_redacted("X-Riot-Token" = Sys.getenv("RIOT_KEY")) %>%
req_perform()
resp_body_json(response, simplifyVector = TRUE)
#| label: get-puuid
get_puuid <- function(game_name, tag_line) {
stopifnot(
is.character(game_name),
is.character(tag_line)
)
}
get_puuid(1, 2)
#| label: get-puuid
get_puuid <- function(game_name, tag_line) {
if (missing(game_name)) {
stop("Error: 'match_id' argument is required.", call. = FALSE)
}
if (missing(tag_line)) {
stop("Error: 'region' argument is required.", call. = FALSE)
}
}
get_puuid(1, 2)
get_puuid()
stop("Error: 'game_name' argument is required.", call. = FALSE)
#| label: get-puuid
get_puuid <- function(game_name, tag_line) {
if (!is.character(match_id) || missing(game_name)) {
stop("Error: 'game_name' argument is required.", call. = FALSE)
}
if (!is.character(match_id) || missing(tag_line)) {
stop("Error: 'tag_line' argument is required.", call. = FALSE)
}
}
get_puuid()
#| label: get-puuid
get_puuid <- function(game_name, tag_line) {
if (!is.character(game_name) || missing(game_name)) {
stop("Error: 'game_name' argument is required.", call. = FALSE)
}
if (!is.character(tag_line) || missing(tag_line)) {
stop("Error: 'tag_line' argument is required.", call. = FALSE)
}
}
get_puuid()
install.packages("checkmate")
library(checkmate)
check_character(game_name, len = 1, any.missing = FALSE)
check_character(tag_line, len = 1, any.missing = FALSE)
#| label: get-puuid
get_puuid <- function(game_name, tag_line) {
check_character(game_name, len = 1, any.missing = FALSE)
check_character(tag_line, len = 1, any.missing = FALSE)
}
get_puuid()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
devtools::document()
