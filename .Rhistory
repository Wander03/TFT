all_items <- enframe(all_items, name = "id", value = "item") %>%
unnest_wider(item, names_sep = " ")
# Identify craftable emblems
craftable_emblems <- all_items %>%
filter(
grepl("Emblem", `item 1`)
) %>%
mutate(item = `item 1`, .keep = "none")
return(craftable_emblems)
}
# -----------------------------------------------------------------------------#
# Generate Team Compositions
# Helper functions
`%||%` <- function(a, b) if (!is.null(a)) a else b
precompute_trait_thresholds <- function(traits_df) {
traits_df %>%
select(trait_name, breakpoints) %>%
mutate(breakpoints = map(breakpoints, ~ as.numeric(.x))) %>%
{set_names(.$breakpoints, .$trait_name)}
}
preprocess_units <- function(units_df) {
units_df %>%
mutate(
traits = strsplit(traits, ", "),
unit_id = row_number()
) %>%
select(unit_id, unit_name, cost, traits)
}
# Improved trait counting that properly checks thresholds
count_activated_traits <- function(units, emblems, units_df, trait_thresholds) {
# Combine unit traits and emblems
all_traits <- unique(c(emblems, unlist(units_df$traits[units_df$unit_name %in% units])))
# Count each trait
counts <- setNames(rep(0, length(all_traits)), all_traits)
counts[emblems] <- table(emblems)
for (unit in units) {
unit_traits <- units_df$traits[[which(units_df$unit_name == unit)]]
for (trait in unit_traits) {
counts[trait] <- counts[trait] + 1
}
}
# Check which traits meet their thresholds
activated <- map_lgl(names(counts), ~ {
thresh <- trait_thresholds[[.x]] %||% numeric(0)
any(counts[.x] >= thresh)
})
# Return only activated traits with their counts
counts[activated]
}
# Optimized horizontal composition with correct trait activation
find_horizontal_comp_correct <- function(emblems, units_df, trait_thresholds, team_size = 8) {
# Initialize
selected_units <- character(0)
current_counts <- table(emblems)
all_traits <- unique(c(names(current_counts), unlist(units_df$traits)))
current_counts <- setNames(rep(0, length(all_traits)), all_traits)
current_counts[names(table(emblems))] <- table(emblems)
while (length(selected_units) < team_size) {
best_unit <- NULL
best_score <- -Inf
for (i in 1:nrow(units_df)) {
unit <- units_df$unit_name[i]
if (unit %in% selected_units) next
unit_traits <- units_df$traits[[i]]
sim_counts <- current_counts
for (trait in unit_traits) {
sim_counts[trait] <- sim_counts[trait] + 1
}
# Calculate how many traits would be newly activated
score <- sum(map_dbl(names(sim_counts), ~ {
thresh <- trait_thresholds[[.x]] %||% numeric(0)
current_active <- any(current_counts[.x] >= thresh)
new_active <- any(sim_counts[.x] >= thresh)
ifelse(new_active && !current_active, 1, 0)
}))
if (score > best_score ||
(score == best_score && units_df$cost[i] > (units_df$cost[units_df$unit_name == best_unit$name] %||% 0))) {
best_unit <- list(name = unit, traits = unit_traits)
best_score <- score
}
}
if (is.null(best_unit)) break
selected_units <- c(selected_units, best_unit$name)
for (trait in best_unit$traits) {
current_counts[trait] <- current_counts[trait] + 1
}
}
# Fill remaining slots with highest cost units
if (length(selected_units) < team_size) {
remaining <- units_df %>%
filter(!unit_name %in% selected_units) %>%
arrange(desc(cost)) %>%
pull(unit_name)
selected_units <- c(selected_units, remaining[1:(team_size - length(selected_units))])
}
# Calculate final activated traits
activated_traits <- count_activated_traits(selected_units, emblems, units_df, trait_thresholds)
list(
team = selected_units,
activated_traits = activated_traits,
num_activated = length(activated_traits)
)
}
# Optimized vertical composition with correct trait activation
find_vertical_comp_correct <- function(emblems, units_df, trait_thresholds, team_size = 8, forced_trait = NULL) {
# Initialize
selected_units <- character(0)
current_counts <- table(emblems)
all_traits <- unique(c(names(current_counts), unlist(units_df$traits)))
current_counts <- setNames(rep(0, length(all_traits)), all_traits)
current_counts[names(table(emblems))] <- table(emblems)
# Determine primary trait
if (is.null(forced_trait)) {
primary_trait <- names(which.max(map_dbl(all_traits, ~ max(trait_thresholds[[.x]] %||% 0))))
} else {
primary_trait <- forced_trait
}
primary_thresholds <- trait_thresholds[[primary_trait]] %||% numeric(0)
# First pass: maximize primary trait with highest cost units first
primary_units <- units_df %>%
filter(map_lgl(traits, ~ primary_trait %in% .x)) %>%
arrange(desc(cost)) %>%
pull(unit_name)
for (unit in primary_units) {
if (length(selected_units) >= team_size) break
current_count <- current_counts[primary_trait]
next_threshold <- primary_thresholds[primary_thresholds > current_count][1]
if (is.na(next_threshold)) break
selected_units <- c(selected_units, unit)
unit_traits <- units_df$traits[[which(units_df$unit_name == unit)]]
for (trait in unit_traits) {
current_counts[trait] <- current_counts[trait] + 1
}
}
# Fill remaining slots with units that activate the most new traits
if (length(selected_units) < team_size) {
remaining_units <- units_df %>%
filter(!unit_name %in% selected_units) %>%
mutate(
new_activations = map_dbl(unit_name, ~ {
unit_traits <- traits[[which(unit_name == .x)]]
sum(map_dbl(unit_traits, ~ {
thresh <- trait_thresholds[[.x]] %||% numeric(0)
current_active <- any(current_counts[.x] >= thresh)
new_active <- any((current_counts[.x] + 1) >= thresh)
ifelse(new_active && !current_active, 1, 0)
}))
})
) %>%
arrange(desc(new_activations), desc(cost)) %>%
pull(unit_name)
to_add <- min(length(remaining_units), team_size - length(selected_units))
selected_units <- c(selected_units, remaining_units[1:to_add])
}
# Calculate final activated traits
activated_traits <- count_activated_traits(selected_units, emblems, units_df, trait_thresholds)
list(
team = selected_units,
activated_traits = activated_traits,
num_activated = length(activated_traits),
primary_trait = primary_trait
)
}
# Wrapper function
generate_teams_correct <- function(emblems, set_data, strategy = "horizontal", team_size = 8, forced_trait = NULL) {
# Preprocess data
units_df <- preprocess_units(set_data$units)
trait_thresholds <- precompute_trait_thresholds(set_data$traits)
if (strategy == "horizontal") {
find_horizontal_comp_correct(emblems, units_df, trait_thresholds, team_size)
} else if (strategy == "vertical") {
find_vertical_comp_correct(emblems, units_df, trait_thresholds, team_size, forced_trait)
} else {
stop("Invalid strategy. Choose 'horizontal' or 'vertical'")
}
}
# Load your data
set_data <- get_set_data()
# Example emblems
emblems <- c("Bruiser", "Sentinel")
# Generate teams with correct trait activation
horizontal_team <- generate_teams_correct(emblems, set_data, "horizontal")
vertical_team <- generate_teams_correct(emblems, set_data, "vertical", forced_trait = "Bruiser")
print(horizontal_team)
print(vertical_team)
runApp('ShinyApp')
# Load your data
set_data <- get_set_data()
# Example emblems
emblems <- c("Black Rose", "Brusier", "Pit Fighter")
# Generate teams with correct trait activation
horizontal_team <- generate_teams_correct(emblems, set_data, "horizontal")
vertical_team <- generate_teams_correct(emblems, set_data, "vertical", forced_trait = "Black Rose")
print(horizontal_team)
print(vertical_team)
runApp('ShinyApp')
get_set_data()
runApp('ShinyApp')
runApp('ShinyApp')
View(tft_data)
runApp('ShinyApp')
runApp('ShinyApp')
tft_data[["setData"]][["champions"]][[3]][["icon"]]
runApp('ShinyApp')
View(set_data)
get_set_data()
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = sapply(set_data$champions[[1]]$apiName, function(x) {
champ_id <- tolower(gsub("TFT[0-9]+_", "", x))
paste0("https://raw.communitydragon.org/pbe/game/assets/characters/",
champ_id, "/hud/", champ_id, "_square.tft.png")
}),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
View(set_data)
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
get_set_data()
image_url <- "https://raw.communitydragon.org/pbe/game/assets/ux/tft/championsplashes/patching/"
get_set_data <- memoise(function(set = NA) {
set_data <- get_set(set)
# Create the units table
units_table <- data.frame(
unit_id = set_data$champions[[1]]$apiName,
unit_name = set_data$champions[[1]]$name,
cost = set_data$champions[[1]]$cost,
traits = sapply(set_data$champions[[1]]$traits,
function(x) paste(x, collapse = ", ")),
pic = paste0(image_url,
tolower(set_data$champions[[1]]$apiName),
"_teamplanner_splash.png"),
stringsAsFactors = FALSE
) %>%
filter(nchar(traits) > 0)  # Remove units with no traits
# Create the traits table
traits_table <- data.frame(
trait_id = set_data$traits[[1]]$apiName,
trait_name = set_data$traits[[1]]$name,
stringsAsFactors = FALSE
)
breakpoints <- lapply(set_data$traits[[1]]$effects, function(eff) {
if (!is.null(eff)) {
units_needed = as.numeric(eff$minUnits)
}
})
traits_table <- traits_table %>%
mutate(
breakpoints = map(breakpoints, function(bp) {
if (is.null(bp)) NA else bp
})
) %>%
arrange(trait_name)
# Get craftable emblems
craftable_emblems <- get_craftable_emblems(set_data) %>%
mutate(
lookup_trait_id = sub("^(.*)_Item_([A-Za-z]+)EmblemItem$", "\\1_\\2", item)
) %>%
left_join(
traits_table %>% select(trait_id, trait_name),
by = c("lookup_trait_id" = "trait_id")
) %>%
left_join(
traits_table %>% select(trait_name) %>% mutate(trait_id = paste0("TFT13_", gsub(" ", "", trait_name))),
by = c("lookup_trait_id" = "trait_id")
) %>%
mutate(trait_name = coalesce(trait_name.x, trait_name.y)) %>%
select(
items = item,
trait_id = lookup_trait_id,
trait_name
) %>%
filter(!is.na(trait_name)) %>%
arrange(trait_name)
return(list(units = units_table, traits = traits_table, craftable = craftable_emblems))
})
get_set_data()
runApp('ShinyApp')
View(set_data)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
View(tft_data)
runApp('ShinyApp')
View(tft_data)
tft_data[["sets"]][["13"]][["champions"]][["role"]]
# Helper function to identify unit-specific traits
get_unit_specific_traits <- function(units_df) {
# Count how many units have each trait
trait_counts <- units_df %>%
select(unit_name, traits) %>%
unnest(traits) %>%
count(traits, name = "unit_count") %>%
filter(unit_count == 1) %>%
pull(traits)
return(trait_counts)
}
get_unit_specific_traits(set_data$units)
# Helper function to identify unit-specific traits
get_unit_specific_traits <- function(units_df) {
# First split all trait combinations into individual traits
all_traits <- units_df %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
# Count how many units have each individual trait
trait_counts <- all_traits %>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count") %>%
filter(unit_count == 1) %>%
pull(traits)
return(trait_counts)
}
get_unit_specific_traits(set_data$units)
units_df %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)
all_traits %>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)%>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
a <- set_data$units %>%
select(unit_name, traits) %>%
mutate(
# Split combined traits into individual ones
traits_split = map(traits, ~ unlist(strsplit(., ", ")))
)%>%
select(unit_name, traits = traits_split) %>%
unnest(traits) %>%
count(traits, name = "unit_count")
a
View(a)
preprocess_units(set_data$units)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
View(set_data)
get_set_data()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
debugonce(find_horizontal_comp_correct)
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
find_horizontal_comp_correct()
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
runApp('ShinyApp')
